<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_a_e_sni_8h" kind="file" language="C++">
    <compoundname>AESni.h</compoundname>
    <includedby refid="_a_e_sni_8c" local="yes">src/AESni.c</includedby>
    <invincdepgraph>
      <node id="5">
        <label>src/AESni.c</label>
        <link refid="_a_e_sni_8c"/>
      </node>
      <node id="4">
        <label>src/AESni.h</label>
        <link refid="_a_e_sni_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_a_e_sni_8h_1ad8683433c71a8f17ff77c9d997d4b5a9" prot="public" static="no">
        <name>EXPORT</name>
        <param><defname>i</defname></param>
        <initializer>__attribute__((visibility(&quot;hidden&quot;), i, target(&quot;aes&quot;)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="33" column="9" bodyfile="src/AESni.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" prot="public" static="no" strong="no">
        <type></type>
        <name>AESKeyMode</name>
        <enumvalue id="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659a15694b73ba8b45b9ff0abf3023a6384c" prot="public">
          <name>aes_128</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659abfa8069615d4eb6201a7934f28ebbac3" prot="public">
          <name>aes_192</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659a8246d89903c2f3c3d42588639f1becd4" prot="public">
          <name>aes_256</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>An enum setting the key mode. </para>        </briefdescription>
        <detaileddescription>
<para>Key Management Internals</para><para><linebreak/>
</para><para>This enum allows to set which key mode for AES is being uesd: either 128 bits, 192 bits, or 256 bits. By setting this also the rounds of AES are defined</para><para>Possible values for the key mode and what it specifies:<itemizedlist>
<listitem><para>aes_128:<programlisting><codeline><highlight class="normal">AES-128<sp/>[key<sp/>=<sp/>128bits,<sp/>AES<sp/>rounds<sp/>=<sp/>10]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_192:<programlisting><codeline><highlight class="normal">AES-192<sp/>[key<sp/>=<sp/>192bits,<sp/>AES<sp/>rounds<sp/>=<sp/>12]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_256:<programlisting><codeline><highlight class="normal">AES-256<sp/>[key<sp/>=<sp/>256bits,<sp/>AES<sp/>rounds<sp/>=<sp/>14]<sp/></highlight></codeline>
</programlisting> </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="53" column="1" bodyfile="src/AESni.h" bodystart="53" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_e_sni_8h_1a5c54c33b4cb1376ceb42c12d1b5256cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__m128i *</type>
        <definition>__m128i* load_key_expansion</definition>
        <argsstring>(uint8_t *key, AESKeyMode keymode)</argsstring>
        <name>load_key_expansion</name>
        <param>
          <type>uint8_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Loads the key expansion based on the passed key and keymode. </para>        </briefdescription>
        <detaileddescription>
<para>The key lenghts for the modes are as follows:</para><para>Possible values for the key mode and what it specifies:<itemizedlist>
<listitem><para>aes_128:<programlisting><codeline><highlight class="normal">AES-128<sp/>[key<sp/>=<sp/>128bits,<sp/>AES<sp/>rounds<sp/>=<sp/>10]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_192:<programlisting><codeline><highlight class="normal">AES-192<sp/>[key<sp/>=<sp/>192bits,<sp/>AES<sp/>rounds<sp/>=<sp/>12]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_256:<programlisting><codeline><highlight class="normal">AES-256<sp/>[key<sp/>=<sp/>256bits,<sp/>AES<sp/>rounds<sp/>=<sp/>14]<sp/></highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><simplesect kind="warning"><para>The passed key does not need to be null terminated, no checks will be made to ensure proper length.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>A uint8_t array representing the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The keymode that should be used, either <bold>AES-128</bold>, <bold>AES-192</bold>, or <bold>AES-256</bold></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The key schedule for the requested AES keymode </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="77" column="1" bodyfile="src/AESni.c" bodystart="175" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_sni_8h_1a715c57e731d131d7442c256a35236de8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aes_ni_enc</definition>
        <argsstring>(__m128i *data, __m128i *key_schedule, AESKeyMode keymode)</argsstring>
        <name>aes_ni_enc</name>
        <param>
          <type>__m128i *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>__m128i *</type>
          <declname>key_schedule</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Encrypts the data using AES implemented directly on the Intel Chip. </para>        </briefdescription>
        <detaileddescription>
<para>Encryption and Decryption Core</para><para><linebreak/>
Encrypts the data passed with the specified Key Schedule through AES using the key length set. The function is implemented using intel Intrinsics for greater performance.</para><para><simplesect kind="warning"><para>The encryption is done directly on the passed data array which must be 128 bits (16 bytes)</para></simplesect>
<programlisting><codeline><highlight class="normal">char<sp/>*<sp/>fullMessage<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>*<sp/>userKey<sp/>=<sp/>...;<sp/>//<sp/>128bits<sp/>using<sp/>AES-128</highlight></codeline>
<codeline><highlight class="normal">__m128i<sp/>*<sp/>keySchedule<sp/>=<sp/>loadKeyExpansion(userKey,<sp/>aes_128);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Encrypt<sp/>the<sp/>first<sp/>16<sp/>bytes<sp/>AES-128</highlight></codeline>
<codeline><highlight class="normal">aes_ni_enc((__m128i<sp/>*)fullMessage[0],<sp/>keySchedule,<sp/>aes_128);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to encrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_schedule</parametername>
</parameternamelist>
<parameterdescription>
<para>The key schedule to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The key mode specifying the key schedule length and AES mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="104" column="1" bodyfile="src/AESni.c" bodystart="200" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_sni_8h_1ae036fa7b2c53b24d1a68b92c6a26757d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void aes_ni_dec</definition>
        <argsstring>(__m128i *data, __m128i *key_schedule, AESKeyMode keymode)</argsstring>
        <name>aes_ni_dec</name>
        <param>
          <type>__m128i *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>__m128i *</type>
          <declname>key_schedule</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Decrypts the data using AES implemented directly on the Intel Chip. </para>        </briefdescription>
        <detaileddescription>
<para>Decrypts the data passed with the specified Key Schedule through AES using the key length set. The function is implemented using intel Intrinsics for greater performance.</para><para><simplesect kind="warning"><para>The decryption is done directly on the passed data array which must be 128 bits (16 bytes)</para></simplesect>
<programlisting><codeline><highlight class="normal">uint8_t<sp/>*<sp/>fullCipher<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>*<sp/>userKey<sp/>=<sp/>...;<sp/>//<sp/>128bits<sp/>using<sp/>AES-128</highlight></codeline>
<codeline><highlight class="normal">__m128i<sp/>*<sp/>keySchedule<sp/>=<sp/>loadKeyExpansion(userKey,<sp/>aes_128);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Decrypt<sp/>the<sp/>first<sp/>16<sp/>bytes<sp/>AES-128</highlight></codeline>
<codeline><highlight class="normal">aes_ni_dec((__m128i<sp/>*)fullCipher[0],<sp/>keySchedule,<sp/>aes_128);</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to decrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_schedule</parametername>
</parameternamelist>
<parameterdescription>
<para>The key schedule to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The key mode specifying the key schedule length and AES mode </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="126" column="1" bodyfile="src/AESni.c" bodystart="223" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_sni_8h_1a2c6df8913bd9dd9309664e54f59da342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aes_cbc_ni_enc</definition>
        <argsstring>(uint8_t *inpt, uint8_t *outt, uint8_t *ivec, unsigned long mlength, uint8_t *epoch_key, AESKeyMode keymode)</argsstring>
        <name>aes_cbc_ni_enc</name>
        <param>
          <type>uint8_t *</type>
          <declname>inpt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>outt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ivec</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mlength</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>epoch_key</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Encrypts the data using Cipher Block Chain (CBC) AES implemented directly on the Intel Chip. </para>        </briefdescription>
        <detaileddescription>
<para>CBC Core</para><para><linebreak/>
Encrypts the passed input data using CBC. The function is implemented using intel Intrinsics for greater performance.</para><para><simplesect kind="note"><para>CBC requires padding, which this function assumes you have already done </para></simplesect>
<simplesect kind="warning"><para>The input length <bold>must</bold> be a multiple of 16 (use padding if necessary) . No checks are run to ensure input, ivec, or epoch key are the correct lengths</para></simplesect>
Possible values for the key mode and what it specifies:<itemizedlist>
<listitem><para>aes_128:<programlisting><codeline><highlight class="normal">AES-128<sp/>[key<sp/>=<sp/>128bits,<sp/>AES<sp/>rounds<sp/>=<sp/>10]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_192:<programlisting><codeline><highlight class="normal">AES-192<sp/>[key<sp/>=<sp/>192bits,<sp/>AES<sp/>rounds<sp/>=<sp/>12]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_256:<programlisting><codeline><highlight class="normal">AES-256<sp/>[key<sp/>=<sp/>256bits,<sp/>AES<sp/>rounds<sp/>=<sp/>14]<sp/></highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to encrypt using AES and CBC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outt</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput>malloc</computeroutput>ed location where the encrypted data will be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivec</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV (Initial Vector) to be used for CBC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input message [in bytes] which is also the output (cipher) message length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key (either defined by the user or generated by the software) that will be used for the key expansion to make the key schedule </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES mode (also defines the key length and number of rounds) [see the possible values above]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="157" column="1" bodyfile="src/AESni.c" bodystart="247" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_sni_8h_1ade9a9440626473e9f4414a0aff92ae54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aes_cbc_ni_dec</definition>
        <argsstring>(uint8_t *inpt, uint8_t *outt, uint8_t *ivec, unsigned long clength, uint8_t *epoch_key, AESKeyMode keymode)</argsstring>
        <name>aes_cbc_ni_dec</name>
        <param>
          <type>uint8_t *</type>
          <declname>inpt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>outt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ivec</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>clength</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>epoch_key</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Decrypts the data using Cipher Block Chain (CBC) AES implemented directly on the Intel Chip. </para>        </briefdescription>
        <detaileddescription>
<para>Decrypts the passed input data using CBC. The function is implemented using intel Intrinsics for greater performance.</para><para><simplesect kind="note"><para>CBC requires padding, which this function assumes you will remove yourself after returning </para></simplesect>
<simplesect kind="warning"><para>The input length <bold>must</bold> be a multiple of 16. No checks are run to ensure input, ivec, or epoch key are the correct lengths</para></simplesect>
Possible values for the key mode and what it specifies:<itemizedlist>
<listitem><para>aes_128:<programlisting><codeline><highlight class="normal">AES-128<sp/>[key<sp/>=<sp/>128bits,<sp/>AES<sp/>rounds<sp/>=<sp/>10]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_192:<programlisting><codeline><highlight class="normal">AES-192<sp/>[key<sp/>=<sp/>192bits,<sp/>AES<sp/>rounds<sp/>=<sp/>12]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_256:<programlisting><codeline><highlight class="normal">AES-256<sp/>[key<sp/>=<sp/>256bits,<sp/>AES<sp/>rounds<sp/>=<sp/>14]<sp/></highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to decrypt using AES and CBC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outt</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput>malloc</computeroutput>ed location where the decrypted data will be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivec</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV (Initial Vector) to be used for CBC decryption </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input cipher [in bytes] which is also the output (message) length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key (passed by the user) that will be used for the key expansion to make the key schedule to decrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES mode (also defines the key length and number of rounds) [see the possible values above]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_(CBC)</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="182" column="1" bodyfile="src/AESni.c" bodystart="274" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_a_e_sni_8h_1ab3a399efd7b9d9f200fe14b5ce52cf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void aes_ctr_ni</definition>
        <argsstring>(uint8_t *inpt, uint8_t *outt, uint8_t *ivec, unsigned long mlength, uint8_t *epoch_key, AESKeyMode keymode)</argsstring>
        <name>aes_ctr_ni</name>
        <param>
          <type>uint8_t *</type>
          <declname>inpt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>outt</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>ivec</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>mlength</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>epoch_key</declname>
        </param>
        <param>
          <type><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref></type>
          <declname>keymode</declname>
        </param>
        <briefdescription>
<para>Encrypts or Decrypts the data using Counter Mode (CTR) AES implemented directly on the Intel Chip. </para>        </briefdescription>
        <detaileddescription>
<para>CTR Core</para><para><linebreak/>
Encrypts or Decrypts the passed input data using CTR. The function is implemented using intel Intrinsics for greater performance.</para><para><simplesect kind="note"><para>Due to the nature of CTR, encryption and decryption are the same so that does not have to be specified. If a non encrypted message is passed it will be encrypted, if an encrypted message is passed it will be decrypted </para></simplesect>
<simplesect kind="warning"><para>No checks are run to ensure input, ivec, or epoch key are the correct lengths</para></simplesect>
Possible values for the key mode and what it specifies:<itemizedlist>
<listitem><para>aes_128:<programlisting><codeline><highlight class="normal">AES-128<sp/>[key<sp/>=<sp/>128bits,<sp/>AES<sp/>rounds<sp/>=<sp/>10]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_192:<programlisting><codeline><highlight class="normal">AES-192<sp/>[key<sp/>=<sp/>192bits,<sp/>AES<sp/>rounds<sp/>=<sp/>12]<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>aes_256:<programlisting><codeline><highlight class="normal">AES-256<sp/>[key<sp/>=<sp/>256bits,<sp/>AES<sp/>rounds<sp/>=<sp/>14]<sp/></highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to decrypt/decrypt using AES and CBC </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outt</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput>malloc</computeroutput>ed location where the decrypted/encrypted data will be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivec</parametername>
</parameternamelist>
<parameterdescription>
<para>The IV (Initial Vector) to be used during the CTR process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the input [in bytes] which is also the output length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key (passed by the user) that will be used for the key expansion to make the key schedule to encrypt/decrypt </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keymode</parametername>
</parameternamelist>
<parameterdescription>
<para>The AES mode (also defines the key length and number of rounds) [see the possible values above]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ulink url="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/AESni.h" line="212" column="1" bodyfile="src/AESni.c" bodystart="302" bodyend="329"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The header file for the AES encryption (basic as well as CBC and CTR mode) implemented with Intel Intrinsics</para><para>08-23-2018 <simplesect kind="version"><para>0.0.1 </para></simplesect>
<simplesect kind="author"><para>Jan Niegsch </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>AESni.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>IIAES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Created<sp/>by<sp/>Developer<sp/>on<sp/>23.08.18.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>©<sp/>2018<sp/>jniegsch.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor">#ifndef<sp/>AESni_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AESni_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>__has_include(&lt;stdio.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#<sp/>if<sp/>__has_include(&lt;wmmintrin.h&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;wmmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;emmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;smmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPORT(i)\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__attribute__((visibility(&quot;hidden&quot;),<sp/>i,<sp/>target(&quot;aes&quot;)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Key<sp/>Management<sp/>Internals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>aes_128<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>aes_192<sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>aes_256<sp/>=<sp/>14</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">__attribute__((visibility(</highlight><highlight class="stringliteral">&quot;hidden&quot;</highlight><highlight class="normal">),<sp/>nonnull(1),<sp/>target(</highlight><highlight class="stringliteral">&quot;aes&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="77"><highlight class="normal">__m128i<sp/>*<sp/><ref refid="_a_e_sni_8h_1a5c54c33b4cb1376ceb42c12d1b5256cb" kindref="member">load_key_expansion</ref>(uint8_t<sp/>*<sp/>key,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>Encryption<sp/>and<sp/>Decryption<sp/>Core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">__attribute__((visibility(</highlight><highlight class="stringliteral">&quot;hidden&quot;</highlight><highlight class="normal">),<sp/>nonnull(1,<sp/>2),<sp/>target(</highlight><highlight class="stringliteral">&quot;aes&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="104"><highlight class="normal">extern<sp/>inline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_sni_8h_1a715c57e731d131d7442c256a35236de8" kindref="member">aes_ni_enc</ref>(__m128i<sp/>*<sp/>data,<sp/>__m128i<sp/>*<sp/>key_schedule,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">__attribute__((visibility(&quot;hidden&quot;),<sp/>nonnull(1,<sp/>2),<sp/>target(&quot;aes&quot;)))</highlight></codeline>
<codeline lineno="126"><highlight class="normal">extern<sp/>inline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_sni_8h_1ae036fa7b2c53b24d1a68b92c6a26757d" kindref="member">aes_ni_dec</ref>(__m128i<sp/>*<sp/>data,<sp/>__m128i<sp/>*<sp/>key_schedule,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>CBC<sp/>Core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">__attribute__((visibility(</highlight><highlight class="stringliteral">&quot;hidden&quot;</highlight><highlight class="normal">),<sp/>nonnull(1,<sp/>2,<sp/>3,<sp/>5),<sp/>target(</highlight><highlight class="stringliteral">&quot;aes&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="157"><highlight class="normal">void<sp/><ref refid="_a_e_sni_8h_1a2c6df8913bd9dd9309664e54f59da342" kindref="member">aes_cbc_ni_enc</ref>(uint8_t<sp/>*<sp/>inpt,<sp/>uint8_t<sp/>*<sp/>outt,<sp/>uint8_t<sp/>*<sp/>ivec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mlength,<sp/>uint8_t<sp/>*<sp/>epoch_key,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">__attribute__((visibility(&quot;hidden&quot;),<sp/>nonnull(1,<sp/>2,<sp/>3,<sp/>5),<sp/>target(&quot;aes&quot;)))</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_e_sni_8h_1ade9a9440626473e9f4414a0aff92ae54" kindref="member">aes_cbc_ni_dec</ref>(uint8_t<sp/>*<sp/>inpt,<sp/>uint8_t<sp/>*<sp/>outt,<sp/>uint8_t<sp/>*<sp/>ivec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>clength,<sp/>uint8_t<sp/>*<sp/>epoch_key,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>mark<sp/>-<sp/>CTR<sp/>Core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">__attribute__((visibility(</highlight><highlight class="stringliteral">&quot;hidden&quot;</highlight><highlight class="normal">),<sp/>nonnull(1,<sp/>2,<sp/>3,<sp/>5),<sp/>target(</highlight><highlight class="stringliteral">&quot;aes&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="212"><highlight class="normal">void<sp/><ref refid="_a_e_sni_8h_1ab3a399efd7b9d9f200fe14b5ce52cf85" kindref="member">aes_ctr_ni</ref>(uint8_t<sp/>*<sp/>inpt,<sp/>uint8_t<sp/>*<sp/>outt,<sp/>uint8_t<sp/>*<sp/>ivec,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mlength,<sp/>uint8_t<sp/>*<sp/>epoch_key,<sp/><ref refid="_a_e_sni_8h_1a42b3206764c080364694538d57a0c659" kindref="member">AESKeyMode</ref><sp/>keymode);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AESni_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/AESni.h"/>
  </compounddef>
</doxygen>
